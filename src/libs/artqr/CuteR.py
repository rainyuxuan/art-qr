"""
Code is re-implement base on https://github.com/chinuno-usami/CuteR.
"""

import itertools
from typing import *

import PIL
from PIL import Image
from PIL import ImageEnhance
import numpy as np
import qrcode

from .base import ArtQRCode, ArtQRCodeConfig

SHOW = False

SQUARE_SIZE_LARGE = 7 + 1  # number of pixels of the length of a locator square with the white margin
SQUARE_SIZE_SMALL = 5  # number of pixels of the length of a locator square with the white margin

TRANSPARENT = (0, 0, 0, 0)
WHITE_OPAQUE = (255, 255, 255, 255)


def _get_locator_pixels(version, box_size):
    # Pattern locators
    pattern_positions: List[int] = qrcode.util.pattern_position(version)
    position_pairs: List[Tuple[int, int]] \
        = [(i, j) for i, j in itertools.product(pattern_positions, pattern_positions)
           if not (i == 6 and j == 6)
           and not (i == 6 and j == pattern_positions[-1])
           and not (j == 6 and i == pattern_positions[-1])]

    # Expand to img_size by box_size
    for idx, (i, j) in enumerate(position_pairs):
        position_pairs[idx] = [(box_size * (i - 2), box_size * (j - 2)),
                               (box_size * (i + 3) - 1, box_size * (j + 3) - 1)]

    return position_pairs


class CuteRCodeConfig(ArtQRCodeConfig):
    # QR Code
    version: int
    error_correction: int
    bg_rgb: tuple[int, int, int]
    transparency: float
    box_factor: int
    # Background image
    brightness: float
    contrast: float
    mask_crop_pos: tuple[int, int]
    resize: float

    def __init__(self,
                 version: int = 3,
                 error_correction: int = qrcode.constants.ERROR_CORRECT_H,
                 brightness: float = 1.0,
                 contrast: float = 1.0,
                 bg_rgb: tuple[int, int, int] = (0, 0, 0),
                 mask_crop_pos: tuple[int, int] = (0, 0),
                 resize: float = 1.0,
                 box_factor: int = 2,
                 transparency: float = 1.0):
        """

        :param version: QR Code version. From 1 to 40.
        :param error_correction: QR Code Error Correction level. L, M, Q, H from qrcode.constants.
        :param brightness: Brightness of the bg-image. >= 1.0.
        :param contrast: Contrast factor of the bg-image. <= 1.0.
        :param bg_rgb: Color to fill the QR Code.
        :param mask_crop_pos: Top-left pixel to crop the mask image.
        :param resize: Scale for resizing the mask image. From 0 to 1.
        :param box_factor: The factor the QR Code boxes reduces in size. >= 1.
        :param transparency: Transparency of the QR Code boxes. Recommend >= 0.7.
        """
        self.version = version
        self.error_correction = error_correction
        self.brightness = brightness
        self.contrast = contrast
        self.bg_rgb = bg_rgb
        self.mask_crop_pos = mask_crop_pos
        self.resize = resize
        self.box_factor = box_factor
        self.transparency = transparency


class CuteRCode(ArtQRCode):
    def __init__(self, data: str, bg_image_path: str, config: CuteRCodeConfig):
        """Initialize a QR Code with CuteR theme.

        :param data: Data to be encoded.
        :param bg_image_path: Path to the background image.
        :param config: Configuration
        """
        super().__init__(data, config)
        self.bg_image = Image.open(bg_image_path)

    def _get_fill_and_back_color(self):
        return self.config.bg_rgb + (int(self.config.transparency * 255),), \
               (255, 255, 255) + (int(self.config.transparency * 255),)

    def _make_bg_image(self, base_size: int, img_size: int):
        """Resize, crop, and enhance the bg_image.

        :param base_size: Size of the QR Code in unit boxes. This is the size of the QR Code image generated by
                          qrcode.QRCode(box_size=1).
        :return: -> tuple[PIL.Image, int]: bg_image, img_size
        """
        bg_image = self.bg_image.convert('RGBA')
        bg_image = bg_image.resize((bg_image.size[0] * self.config.resize,
                                    bg_image.size[1] * self.config.resize),
                                   PIL.Image.NEAREST)
        # TODO: Isolate img_size and crop
        if img_size is None:
            img_size = min(bg_image.size[0], bg_image.size[1])
        # First resize to an integer multiple of base size, facilitates smaller box size
        img_size = img_size - (img_size % base_size)
        bg_image = bg_image.crop(self.config.mask_crop_pos + (img_size, img_size))

        # ------ Enhance BG image ------ #
        # Reduce contrast
        contrast_enhance = ImageEnhance.Contrast(bg_image)
        bg_image = contrast_enhance.enhance(self.config.contrast)
        # Increase brightness
        brightness_enhance = ImageEnhance.Brightness(bg_image)
        bg_image = brightness_enhance.enhance(self.config.brightness)

        self.bg_image = bg_image
        return bg_image, img_size

    def _make_qr_image(self, qr, base_size, size):
        def _is_fill_pixel(x, y):
            padding = (box_size - new_box_size) // 2
            if padding < 0:
                raise "Illegal box_factor"

            ix, iy = x % box_size, y % box_size  # index within a box
            return padding <= ix < box_size - padding and padding <= iy < box_size - padding

        def _is_locator_pixel(x, y):
            # Corner locators
            if (x < corner_size and y < corner_size) or \
                    (x < corner_size and y >= size - corner_size) or \
                    (x >= size - corner_size and y < corner_size):
                return True
            # Pattern locators
            for [tl, br] in locator_positions:
                if tl[0] <= x <= br[0] and tl[1] <= y <= br[1]:
                    return True
            return False

        # ------ Find QR Code box sizes ------ #
        box_size = size // base_size  # Size of a qr-code pixel unit in pixel
        corner_size = int(SQUARE_SIZE_LARGE * box_size)  # Size of the QR Code pixel, in pixel
        new_box_size = box_size // self.config.box_factor  # Size of the small QR Code pixel, in pixel

        print(f"img_size: {size}\n"
              f"box_size: {box_size}\n"
              f"corner_size: {corner_size}\n"
              f"new_box_size: {new_box_size}\n"
              f"version: {qr.version}")

        # Image of the base QR code in RGBA format
        qr_img = qr.make_image().convert('RGBA')
        qr_img = qr_img.resize((size, size), PIL.Image.NEAREST)

        # position of the locators
        locator_positions = _get_locator_pixels(qr.version, box_size)

        # ------ Process QR image ------ #
        fill_color, back_color = self._get_fill_and_back_color()
        # Set data pixels to pixel_color, set paddings to transparent
        for x in range(0, size):
            for y in range(0, size):
                pixel_color = back_color if qr_img.getpixel((x, y)) == WHITE_OPAQUE else fill_color
                # Skip corners
                if _is_locator_pixel(x, y):
                    qr_img.putpixel((x, y), pixel_color)
                else:
                    if _is_fill_pixel(x, y):
                        qr_img.putpixel((x, y), pixel_color)
                    else:
                        qr_img.putpixel((x, y), TRANSPARENT)

        return qr_img

    def make(self, size=None):
        """Make a QR Code image in CuteR style.

        :return: -> tuple[PIL.Image, PIL.Image]: cuter_image, original_qr_img
        """

        # Make base QR Code
        qr = qrcode.QRCode(version=self.config.version,
                           error_correction=self.config.error_correction,
                           box_size=1,
                           border=0)
        qr.add_data(self.data)
        qr.make(fit=True)

        qr_make = qr.make_image()
        base_size = qr_make.pixel_size  # original qr-code image size

        # ------ Get a resized, cropped bg_image ------ #
        bg_image, img_size = self._make_bg_image(base_size, size)
        size = size or img_size

        # ------ Get image of the transparent qr_img ------ #
        # with a size of whole number multiple of the base_size
        qr_img = self._make_qr_image(qr, base_size, img_size)

        # ------ Combine to build result image ------ #
        cuter_img = bg_image.copy()
        cuter_img.paste(qr_img, (0, 0, img_size, img_size), qr_img)
        # Resize to desired size
        cuter_img = cuter_img.resize((size, size), PIL.Image.NEAREST)

        SHOW and cuter_img.show()
        return cuter_img.convert('RGB'), qr_make.convert('RGB').resize((size, size), PIL.Image.NEAREST)
